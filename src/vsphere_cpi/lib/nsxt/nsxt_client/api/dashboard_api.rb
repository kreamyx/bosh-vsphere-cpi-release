=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class DashboardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a new Widget Configuration.
    # Creates a new Widget Configuration and adds it to the 'default_view'. Supported resource_types are LabelValueConfiguration, DonutConfiguration,   MultiWidgetConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The 'field' is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in condition and display value are         well-formed and free of runtime-errors such as null pointers and         evaluates to true; Then remaining render configurations are not         evaluated, and the current render configurations 'display value'         is taken as the final value.      2. If expression provided in condition of render configuration is         false, then next render configuration is evaluated.      3. Finally, field is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message: \"__ERROR__: See the Error_Messages field of this report   for details\" is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the Label for   identification) as Error_Messages: {}.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration's display_value. 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [WidgetConfiguration]
    def create_widget_configuration(widget_configuration, opts = {})
      data, _status_code, _headers = create_widget_configuration_with_http_info(widget_configuration, opts)
      return data
    end

    # Creates a new Widget Configuration.
    # Creates a new Widget Configuration and adds it to the &#39;default_view&#39;. Supported resource_types are LabelValueConfiguration, DonutConfiguration,   MultiWidgetConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The &#39;field&#39; is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in condition and display value are         well-formed and free of runtime-errors such as null pointers and         evaluates to true; Then remaining render configurations are not         evaluated, and the current render configurations &#39;display value&#39;         is taken as the final value.      2. If expression provided in condition of render configuration is         false, then next render configuration is evaluated.      3. Finally, field is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message: \&quot;__ERROR__: See the Error_Messages field of this report   for details\&quot; is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the Label for   identification) as Error_Messages: {}.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration&#39;s display_value. 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WidgetConfiguration, Fixnum, Hash)>] WidgetConfiguration data, response status code and response headers
    def create_widget_configuration_with_http_info(widget_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DashboardApi.create_widget_configuration ..."
      end
      # verify the required parameter 'widget_configuration' is set
      if @api_client.config.client_side_validation && widget_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'widget_configuration' when calling DashboardApi.create_widget_configuration"
      end
      # resource path
      local_var_path = "/ui-views/dashboard/widgetconfigurations"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(widget_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#create_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Widget Configuration
    # Delete Widget Configuration
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_widget_configuration(widgetconfiguration_id, opts = {})
      delete_widget_configuration_with_http_info(widgetconfiguration_id, opts)
      return nil
    end

    # Delete Widget Configuration
    # Delete Widget Configuration
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_widget_configuration_with_http_info(widgetconfiguration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DashboardApi.delete_widget_configuration ..."
      end
      # verify the required parameter 'widgetconfiguration_id' is set
      if @api_client.config.client_side_validation && widgetconfiguration_id.nil?
        fail ArgumentError, "Missing the required parameter 'widgetconfiguration_id' when calling DashboardApi.delete_widget_configuration"
      end
      # resource path
      local_var_path = "/ui-views/dashboard/widgetconfigurations/{widgetconfiguration-id}".sub('{' + 'widgetconfiguration-id' + '}', widgetconfiguration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#delete_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns Widget Configuration Information
    # Returns Information about a specific Widget Configuration ( 'LabelValueConfiguration' ). 
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [WidgetConfiguration]
    def get_widget_configuration(widgetconfiguration_id, opts = {})
      data, _status_code, _headers = get_widget_configuration_with_http_info(widgetconfiguration_id, opts)
      return data
    end

    # Returns Widget Configuration Information
    # Returns Information about a specific Widget Configuration ( &#39;LabelValueConfiguration&#39; ). 
    # @param widgetconfiguration_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WidgetConfiguration, Fixnum, Hash)>] WidgetConfiguration data, response status code and response headers
    def get_widget_configuration_with_http_info(widgetconfiguration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DashboardApi.get_widget_configuration ..."
      end
      # verify the required parameter 'widgetconfiguration_id' is set
      if @api_client.config.client_side_validation && widgetconfiguration_id.nil?
        fail ArgumentError, "Missing the required parameter 'widgetconfiguration_id' when calling DashboardApi.get_widget_configuration"
      end
      # resource path
      local_var_path = "/ui-views/dashboard/widgetconfigurations/{widgetconfiguration-id}".sub('{' + 'widgetconfiguration-id' + '}', widgetconfiguration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#get_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
    # If no query params are specified then all the Widget Configurations of the view are returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container Id of the container
    # @option opts [String] :widget_ids Ids of the WidgetConfigurations
    # @return [WidgetConfigurationList]
    def list_widget_configurations(opts = {})
      data, _status_code, _headers = list_widget_configurations_with_http_info(opts)
      return data
    end

    # Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.
    # If no query params are specified then all the Widget Configurations of the view are returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :container Id of the container
    # @option opts [String] :widget_ids Ids of the WidgetConfigurations
    # @return [Array<(WidgetConfigurationList, Fixnum, Hash)>] WidgetConfigurationList data, response status code and response headers
    def list_widget_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DashboardApi.list_widget_configurations ..."
      end
      # resource path
      local_var_path = "/ui-views/dashboard/widgetconfigurations"

      # query parameters
      query_params = {}
      query_params[:'container'] = opts[:'container'] if !opts[:'container'].nil?
      query_params[:'widget_ids'] = opts[:'widget_ids'] if !opts[:'widget_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfigurationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#list_widget_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Widget Configuration
    # Update Widget Configuration
    # @param widgetconfiguration_id 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [WidgetConfiguration]
    def update_widget_configuration(widgetconfiguration_id, widget_configuration, opts = {})
      data, _status_code, _headers = update_widget_configuration_with_http_info(widgetconfiguration_id, widget_configuration, opts)
      return data
    end

    # Update Widget Configuration
    # Update Widget Configuration
    # @param widgetconfiguration_id 
    # @param widget_configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WidgetConfiguration, Fixnum, Hash)>] WidgetConfiguration data, response status code and response headers
    def update_widget_configuration_with_http_info(widgetconfiguration_id, widget_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DashboardApi.update_widget_configuration ..."
      end
      # verify the required parameter 'widgetconfiguration_id' is set
      if @api_client.config.client_side_validation && widgetconfiguration_id.nil?
        fail ArgumentError, "Missing the required parameter 'widgetconfiguration_id' when calling DashboardApi.update_widget_configuration"
      end
      # verify the required parameter 'widget_configuration' is set
      if @api_client.config.client_side_validation && widget_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'widget_configuration' when calling DashboardApi.update_widget_configuration"
      end
      # resource path
      local_var_path = "/ui-views/dashboard/widgetconfigurations/{widgetconfiguration-id}".sub('{' + 'widgetconfiguration-id' + '}', widgetconfiguration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(widget_configuration)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WidgetConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardApi#update_widget_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

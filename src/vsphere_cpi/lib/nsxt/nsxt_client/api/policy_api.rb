=begin
#NSX API

#VMware NSX REST API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module NSXT
  class PolicyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new Domain Deployment Map under infra
    # If the passed Domain Deployment Map does not already exist, create a new Domain Deployment Map. If it already exist, replace it. 
    # @param domain_id Domain ID
    # @param domain_deployment_map_id Domain Deployment Map ID
    # @param domain_deployment_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_update_domain_deployment_map_for_infra(domain_id, domain_deployment_map_id, domain_deployment_map, opts = {})
      create_or_update_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, domain_deployment_map, opts)
      return nil
    end

    # Create a new Domain Deployment Map under infra
    # If the passed Domain Deployment Map does not already exist, create a new Domain Deployment Map. If it already exist, replace it. 
    # @param domain_id Domain ID
    # @param domain_deployment_map_id Domain Deployment Map ID
    # @param domain_deployment_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_update_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, domain_deployment_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.create_or_update_domain_deployment_map_for_infra ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.create_or_update_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling PolicyApi.create_or_update_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map' is set
      if @api_client.config.client_side_validation && domain_deployment_map.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map' when calling PolicyApi.create_or_update_domain_deployment_map_for_infra"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain_deployment_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#create_or_update_domain_deployment_map_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_update_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts)
      return nil
    end

    # Create/update a new Enforcement Point under infra
    # If the passed Enforcement Point does not already exist, create a new Enforcement Point. If it already exists, replace it. 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param enforcement_point 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_update_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, enforcement_point, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.create_or_update_enforcement_point_for_infra ..."
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyApi.create_or_update_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcement_point' is set
      if @api_client.config.client_side_validation && enforcement_point.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point' when calling PolicyApi.create_or_update_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = "/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}".sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enforcement_point)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#create_or_update_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a template.
    # Create a new template if the specified template id does not correspond to an existing template. Update the template if otherwise. 
    # @param template_id Template identifier
    # @param policy_template 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_or_update_template(template_id, policy_template, opts = {})
      create_or_update_template_with_http_info(template_id, policy_template, opts)
      return nil
    end

    # Create or update a template.
    # Create a new template if the specified template id does not correspond to an existing template. Update the template if otherwise. 
    # @param template_id Template identifier
    # @param policy_template 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_or_update_template_with_http_info(template_id, policy_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.create_or_update_template ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling PolicyApi.create_or_update_template"
      end
      # verify the required parameter 'policy_template' is set
      if @api_client.config.client_side_validation && policy_template.nil?
        fail ArgumentError, "Missing the required parameter 'policy_template' when calling PolicyApi.create_or_update_template"
      end
      # resource path
      local_var_path = "/templates/{template-id}".sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_template)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#create_or_update_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CommunicationEntry
    # Delete CommunicationEntry
    # @param domain_id Domain ID
    # @param communication_entry_id CommunicationEntry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_entry(domain_id, communication_entry_id, opts = {})
      delete_communication_entry_with_http_info(domain_id, communication_entry_id, opts)
      return nil
    end

    # Delete CommunicationEntry
    # Delete CommunicationEntry
    # @param domain_id Domain ID
    # @param communication_entry_id CommunicationEntry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_entry_with_http_info(domain_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_communication_entry ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyApi.delete_communication_entry"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map/communication-entries/{communication-entry-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CommunicationProfile
    # Delete CommunicationProfile
    # @param communication_profile_id CommunicationProfile ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_profile(communication_profile_id, opts = {})
      delete_communication_profile_with_http_info(communication_profile_id, opts)
      return nil
    end

    # Delete CommunicationProfile
    # Delete CommunicationProfile
    # @param communication_profile_id CommunicationProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_profile_with_http_info(communication_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_communication_profile ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.delete_communication_profile"
      end
      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_communication_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CommunicationProfileEntry
    # Delete CommunicationProfileEntry
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile_entry_id CommunicationProfileEntry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_profile_entry(communication_profile_id, communication_profile_entry_id, opts = {})
      delete_communication_profile_entry_with_http_info(communication_profile_id, communication_profile_entry_id, opts)
      return nil
    end

    # Delete CommunicationProfileEntry
    # Delete CommunicationProfileEntry
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile_entry_id CommunicationProfileEntry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_profile_entry_with_http_info(communication_profile_id, communication_profile_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_communication_profile_entry ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.delete_communication_profile_entry"
      end
      # verify the required parameter 'communication_profile_entry_id' is set
      if @api_client.config.client_side_validation && communication_profile_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_entry_id' when calling PolicyApi.delete_communication_profile_entry"
      end
      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}/communication-profile-entries/{communication-profile-entry-id}".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s).sub('{' + 'communication-profile-entry-id' + '}', communication_profile_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_communication_profile_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Domain and all the entities contained by this domain
    # Delete the domain along with all the entities contained by this domain. The groups that are a part of this domain are also deleted along with the domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_domain(domain_id, opts = {})
      delete_domain_with_http_info(domain_id, opts)
      return nil
    end

    # Delete Domain and all the entities contained by this domain
    # Delete the domain along with all the entities contained by this domain. The groups that are a part of this domain are also deleted along with the domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_domain ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.delete_domain"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Domain Deployment Map
    # Delete Domain Deployment Map
    # @param domain_id Domain ID
    # @param domain_deployment_map_id domain-deployment-map-id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_domain_deployment_map(domain_id, domain_deployment_map_id, opts = {})
      delete_domain_deployment_map_with_http_info(domain_id, domain_deployment_map_id, opts)
      return nil
    end

    # Delete Domain Deployment Map
    # Delete Domain Deployment Map
    # @param domain_id Domain ID
    # @param domain_deployment_map_id domain-deployment-map-id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_domain_deployment_map_with_http_info(domain_id, domain_deployment_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_domain_deployment_map ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.delete_domain_deployment_map"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling PolicyApi.delete_domain_deployment_map"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_domain_deployment_map\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete EnforcementPoint
    # Delete EnforcementPoint
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id enforcementpoint-id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_enforcement_point(deployment_zone_id, enforcementpoint_id, opts = {})
      delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      return nil
    end

    # Delete EnforcementPoint
    # Delete EnforcementPoint
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id enforcementpoint-id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_enforcement_point_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_enforcement_point ..."
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyApi.delete_enforcement_point"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyApi.delete_enforcement_point"
      end
      # resource path
      local_var_path = "/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}".sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_enforcement_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_group(domain_id, group_id, opts = {})
      delete_group_with_http_info(domain_id, group_id, opts)
      return nil
    end

    # Delete Group
    # Delete Group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_group ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.delete_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.delete_group"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/groups/{group-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_entry(service_id, service_entry_id, opts = {})
      delete_service_entry_with_http_info(service_id, service_entry_id, opts)
      return nil
    end

    # Delete Service entry
    # Delete Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_service_entry ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.delete_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyApi.delete_service_entry"
      end
      # resource path
      local_var_path = "/infra/services/{service-id}/service-entries/{service-entry-id}".sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_for_tenant(service_id, opts = {})
      delete_service_for_tenant_with_http_info(service_id, opts)
      return nil
    end

    # Delete Service
    # Delete Service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_service_for_tenant ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.delete_service_for_tenant"
      end
      # resource path
      local_var_path = "/infra/services/{service-id}".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete template.
    # Delete a template.
    # @param template_id Template identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_template(template_id, opts = {})
      delete_template_with_http_info(template_id, opts)
      return nil
    end

    # Delete template.
    # Delete a template.
    # @param template_id Template identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.delete_template ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling PolicyApi.delete_template"
      end
      # resource path
      local_var_path = "/templates/{template-id}".sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deploy template.
    # Read a template, populate the placeholders' fields with the parameters' values, and deploy the template body by creating or updating all the nested policy objects inside the AbstractSpace object. 
    # @param template_id Template identifier
    # @param policy_template_parameters 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deploy_template_deploy(template_id, policy_template_parameters, opts = {})
      deploy_template_deploy_with_http_info(template_id, policy_template_parameters, opts)
      return nil
    end

    # Deploy template.
    # Read a template, populate the placeholders&#39; fields with the parameters&#39; values, and deploy the template body by creating or updating all the nested policy objects inside the AbstractSpace object. 
    # @param template_id Template identifier
    # @param policy_template_parameters 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def deploy_template_deploy_with_http_info(template_id, policy_template_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.deploy_template_deploy ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling PolicyApi.deploy_template_deploy"
      end
      # verify the required parameter 'policy_template_parameters' is set
      if @api_client.config.client_side_validation && policy_template_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'policy_template_parameters' when calling PolicyApi.deploy_template_deploy"
      end
      # resource path
      local_var_path = "/templates/{template-id}?action=deploy".sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_template_parameters)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#deploy_template_deploy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CommunicationEntries
    # List CommunicationEntries
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationEntryListResult]
    def list_communication_entry(domain_id, opts = {})
      data, _status_code, _headers = list_communication_entry_with_http_info(domain_id, opts)
      return data
    end

    # List CommunicationEntries
    # List CommunicationEntries
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationEntryListResult, Fixnum, Hash)>] CommunicationEntryListResult data, response status code and response headers
    def list_communication_entry_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_communication_entry ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.list_communication_entry"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_communication_entry, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_communication_entry, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map/communication-entries".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CommunicationProfileEntries for CommunicationProfile
    # Paginated list of CommunicationProfileEntries for the given CommunicationProfile. 
    # @param communication_profile_id CommunicationProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationProfileEntryListResult]
    def list_communication_profile_entries(communication_profile_id, opts = {})
      data, _status_code, _headers = list_communication_profile_entries_with_http_info(communication_profile_id, opts)
      return data
    end

    # List CommunicationProfileEntries for CommunicationProfile
    # Paginated list of CommunicationProfileEntries for the given CommunicationProfile. 
    # @param communication_profile_id CommunicationProfile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationProfileEntryListResult, Fixnum, Hash)>] CommunicationProfileEntryListResult data, response status code and response headers
    def list_communication_profile_entries_with_http_info(communication_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_communication_profile_entries ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.list_communication_profile_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_communication_profile_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_communication_profile_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}/communication-profile-entries".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationProfileEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_communication_profile_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CommunicationProfiles
    # Paginated list of CommunicationProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationProfileListResult]
    def list_communication_profiles(opts = {})
      data, _status_code, _headers = list_communication_profiles_with_http_info(opts)
      return data
    end

    # List CommunicationProfiles
    # Paginated list of CommunicationProfiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationProfileListResult, Fixnum, Hash)>] CommunicationProfileListResult data, response status code and response headers
    def list_communication_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_communication_profiles ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_communication_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_communication_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/communication-profiles"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_communication_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Deployment Zones for infra
    # Paginated list of all Deployment zones for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DeploymentZoneListResult]
    def list_deployment_zones_for_infra(opts = {})
      data, _status_code, _headers = list_deployment_zones_for_infra_with_http_info(opts)
      return data
    end

    # List Deployment Zones for infra
    # Paginated list of all Deployment zones for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DeploymentZoneListResult, Fixnum, Hash)>] DeploymentZoneListResult data, response status code and response headers
    def list_deployment_zones_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_deployment_zones_for_infra ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_deployment_zones_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_deployment_zones_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/deployment-zones"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentZoneListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_deployment_zones_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Domain Deployment maps for infra
    # Paginated list of all Domain Deployment Entries for infra. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainDeploymentMapListResult]
    def list_domain_deployment_maps_for_infra(domain_id, opts = {})
      data, _status_code, _headers = list_domain_deployment_maps_for_infra_with_http_info(domain_id, opts)
      return data
    end

    # List Domain Deployment maps for infra
    # Paginated list of all Domain Deployment Entries for infra. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainDeploymentMapListResult, Fixnum, Hash)>] DomainDeploymentMapListResult data, response status code and response headers
    def list_domain_deployment_maps_for_infra_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_domain_deployment_maps_for_infra ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.list_domain_deployment_maps_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_domain_deployment_maps_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_domain_deployment_maps_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/domains/{domain-id}/domain-deployment-maps".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_domain_deployment_maps_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [DomainListResult]
    def list_domain_for_infra(opts = {})
      data, _status_code, _headers = list_domain_for_infra_with_http_info(opts)
      return data
    end

    # List domains for infra
    # Paginated list of all domains for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(DomainListResult, Fixnum, Hash)>] DomainListResult data, response status code and response headers
    def list_domain_for_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_domain_for_infra ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_domain_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_domain_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/domains"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [EnforcementPointListResult]
    def list_enforcement_point_for_infra(deployment_zone_id, opts = {})
      data, _status_code, _headers = list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts)
      return data
    end

    # List enforcementpoints for infra
    # Paginated list of all enforcementpoints for infra. 
    # @param deployment_zone_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(EnforcementPointListResult, Fixnum, Hash)>] EnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_for_infra_with_http_info(deployment_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_enforcement_point_for_infra ..."
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyApi.list_enforcement_point_for_infra"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_enforcement_point_for_infra, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_enforcement_point_for_infra, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/deployment-zones/{deployment-zone-id}/enforcement-points".sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Enforcement Points
    # Paginated list of all enforcement points. Returns the populated enforcement points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedEnforcementPointListResult]
    def list_enforcement_point_realized_states(opts = {})
      data, _status_code, _headers = list_enforcement_point_realized_states_with_http_info(opts)
      return data
    end

    # List Enforcement Points
    # Paginated list of all enforcement points. Returns the populated enforcement points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedEnforcementPointListResult, Fixnum, Hash)>] RealizedEnforcementPointListResult data, response status code and response headers
    def list_enforcement_point_realized_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_enforcement_point_realized_states ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_enforcement_point_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_enforcement_point_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedEnforcementPointListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_enforcement_point_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Firewall Sections
    # Paginated list of all Firewalls. Returns populated Firewalls. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedFirewallSectionListResult]
    def list_firewall_section_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_firewall_section_realized_states_with_http_info(enforcement_point_name, opts)
      return data
    end

    # List Firewall Sections
    # Paginated list of all Firewalls. Returns populated Firewalls. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedFirewallSectionListResult, Fixnum, Hash)>] RealizedFirewallSectionListResult data, response status code and response headers
    def list_firewall_section_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_firewall_section_realized_states ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.list_firewall_section_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_firewall_section_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_firewall_section_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedFirewallSectionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_firewall_section_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Groups for a domain
    # List Groups for a domain
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [GroupListResult]
    def list_group_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_group_for_domain_with_http_info(domain_id, opts)
      return data
    end

    # List Groups for a domain
    # List Groups for a domain
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(GroupListResult, Fixnum, Hash)>] GroupListResult data, response status code and response headers
    def list_group_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_group_for_domain ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.list_group_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_group_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_group_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/domains/{domain-id}/groups".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IPSets
    # Paginated list of all Realized IPSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedIPSetListResult]
    def list_ip_set_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ip_set_realized_states_with_http_info(enforcement_point_name, opts)
      return data
    end

    # List IPSets
    # Paginated list of all Realized IPSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedIPSetListResult, Fixnum, Hash)>] RealizedIPSetListResult data, response status code and response headers
    def list_ip_set_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_ip_set_realized_states ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.list_ip_set_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_ip_set_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_ip_set_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedIPSetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_ip_set_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List MACSets
    # Paginated list of all Realized MACSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedMACSetListResult]
    def list_mac_set_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_mac_set_realized_states_with_http_info(enforcement_point_name, opts)
      return data
    end

    # List MACSets
    # Paginated list of all Realized MACSets 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedMACSetListResult, Fixnum, Hash)>] RealizedMACSetListResult data, response status code and response headers
    def list_mac_set_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_mac_set_realized_states ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.list_mac_set_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_mac_set_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_mac_set_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedMACSetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_mac_set_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List NS Groups
    # Paginated list of all NSGroups. Returns populated NSGroups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedNSGroupListResult]
    def list_ns_group_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ns_group_realized_states_with_http_info(enforcement_point_name, opts)
      return data
    end

    # List NS Groups
    # Paginated list of all NSGroups. Returns populated NSGroups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedNSGroupListResult, Fixnum, Hash)>] RealizedNSGroupListResult data, response status code and response headers
    def list_ns_group_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_ns_group_realized_states ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.list_ns_group_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_ns_group_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_ns_group_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedNSGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_ns_group_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Realized NSServices
    # Paginated list of all Realized NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedNSServiceListResult]
    def list_ns_service_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_ns_service_realized_states_with_http_info(enforcement_point_name, opts)
      return data
    end

    # List Realized NSServices
    # Paginated list of all Realized NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedNSServiceListResult, Fixnum, Hash)>] RealizedNSServiceListResult data, response status code and response headers
    def list_ns_service_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_ns_service_realized_states ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.list_ns_service_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_ns_service_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_ns_service_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedNSServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_ns_service_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Security Groups
    # Paginated list of all Security Groups. Returns populated Security Groups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RealizedSecurityGroupListResult]
    def list_security_group_realized_states(enforcement_point_name, opts = {})
      data, _status_code, _headers = list_security_group_realized_states_with_http_info(enforcement_point_name, opts)
      return data
    end

    # List Security Groups
    # Paginated list of all Security Groups. Returns populated Security Groups. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RealizedSecurityGroupListResult, Fixnum, Hash)>] RealizedSecurityGroupListResult data, response status code and response headers
    def list_security_group_realized_states_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_security_group_realized_states ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.list_security_group_realized_states"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_security_group_realized_states, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_security_group_realized_states, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedSecurityGroupListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_security_group_realized_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceEntryListResult]
    def list_service_entries(service_id, opts = {})
      data, _status_code, _headers = list_service_entries_with_http_info(service_id, opts)
      return data
    end

    # List Service entries for the given service
    # Paginated list of Service entries for the given service 
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceEntryListResult, Fixnum, Hash)>] ServiceEntryListResult data, response status code and response headers
    def list_service_entries_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_service_entries ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.list_service_entries"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_service_entries, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_service_entries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/services/{service-id}/service-entries".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_service_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [ServiceListResult]
    def list_services_for_tenant(opts = {})
      data, _status_code, _headers = list_services_for_tenant_with_http_info(opts)
      return data
    end

    # List Services for infra
    # Paginated list of Services for infra. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(ServiceListResult, Fixnum, Hash)>] ServiceListResult data, response status code and response headers
    def list_services_for_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_services_for_tenant ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_services_for_tenant, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_services_for_tenant, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/infra/services"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_services_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Policy Templates
    # List Policy Templates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyTemplateListResult]
    def list_templates(opts = {})
      data, _status_code, _headers = list_templates_with_http_info(opts)
      return data
    end

    # List Policy Templates
    # List Policy Templates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [String] :included_fields Comma separated list of fields that should be included to result of query
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyTemplateListResult, Fixnum, Hash)>] PolicyTemplateListResult data, response status code and response headers
    def list_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.list_templates ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_templates, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyApi.list_templates, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTemplateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read CommunicationEntry
    # Read CommunicationEntry
    # @param domain_id Domain ID
    # @param communication_entry_id CommunicationEntry ID
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def read_communication_entry(domain_id, communication_entry_id, opts = {})
      data, _status_code, _headers = read_communication_entry_with_http_info(domain_id, communication_entry_id, opts)
      return data
    end

    # Read CommunicationEntry
    # Read CommunicationEntry
    # @param domain_id Domain ID
    # @param communication_entry_id CommunicationEntry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def read_communication_entry_with_http_info(domain_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_communication_entry ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.read_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyApi.read_communication_entry"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map/communication-entries/{communication-entry-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read communication-map
    # Read communication-map for a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def read_communication_map_for_domain(domain_id, opts = {})
      data, _status_code, _headers = read_communication_map_for_domain_with_http_info(domain_id, opts)
      return data
    end

    # Read communication-map
    # Read communication-map for a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def read_communication_map_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_communication_map_for_domain ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.read_communication_map_for_domain"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read CommunicationProfile
    # Read a CommunicationProfile. 
    # @param communication_profile_id CommunicationProfile ID
    # @param [Hash] opts the optional parameters
    # @return [CommunicationProfile]
    def read_communication_profile(communication_profile_id, opts = {})
      data, _status_code, _headers = read_communication_profile_with_http_info(communication_profile_id, opts)
      return data
    end

    # Read CommunicationProfile
    # Read a CommunicationProfile. 
    # @param communication_profile_id CommunicationProfile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationProfile, Fixnum, Hash)>] CommunicationProfile data, response status code and response headers
    def read_communication_profile_with_http_info(communication_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_communication_profile ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.read_communication_profile"
      end
      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_communication_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read CommunicationProfileEntry
    # Read CommunicationProfileEntry
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile_entry_id CommunicationProfileEntry ID
    # @param [Hash] opts the optional parameters
    # @return [CommunicationProfileEntry]
    def read_communication_profile_entry(communication_profile_id, communication_profile_entry_id, opts = {})
      data, _status_code, _headers = read_communication_profile_entry_with_http_info(communication_profile_id, communication_profile_entry_id, opts)
      return data
    end

    # Read CommunicationProfileEntry
    # Read CommunicationProfileEntry
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile_entry_id CommunicationProfileEntry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationProfileEntry, Fixnum, Hash)>] CommunicationProfileEntry data, response status code and response headers
    def read_communication_profile_entry_with_http_info(communication_profile_id, communication_profile_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_communication_profile_entry ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.read_communication_profile_entry"
      end
      # verify the required parameter 'communication_profile_entry_id' is set
      if @api_client.config.client_side_validation && communication_profile_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_entry_id' when calling PolicyApi.read_communication_profile_entry"
      end
      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}/communication-profile-entries/{communication-profile-entry-id}".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s).sub('{' + 'communication-profile-entry-id' + '}', communication_profile_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationProfileEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_communication_profile_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a DeploymentZone
    # Read a Deployment Zone 
    # @param deployment_zone_id Deployment Zone id
    # @param [Hash] opts the optional parameters
    # @return [DeploymentZone]
    def read_deployment_zone_infra(deployment_zone_id, opts = {})
      data, _status_code, _headers = read_deployment_zone_infra_with_http_info(deployment_zone_id, opts)
      return data
    end

    # Read a DeploymentZone
    # Read a Deployment Zone 
    # @param deployment_zone_id Deployment Zone id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentZone, Fixnum, Hash)>] DeploymentZone data, response status code and response headers
    def read_deployment_zone_infra_with_http_info(deployment_zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_deployment_zone_infra ..."
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyApi.read_deployment_zone_infra"
      end
      # resource path
      local_var_path = "/infra/deployment-zones/{deployment-zone-id}".sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentZone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_deployment_zone_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a DomainDeploymentMap
    # Read a Domain Deployment Map 
    # @param domain_id Domain ID
    # @param domain_deployment_map_id Domain Deployment Map id
    # @param [Hash] opts the optional parameters
    # @return [DomainDeploymentMap]
    def read_domain_deployment_map_for_infra(domain_id, domain_deployment_map_id, opts = {})
      data, _status_code, _headers = read_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, opts)
      return data
    end

    # Read a DomainDeploymentMap
    # Read a Domain Deployment Map 
    # @param domain_id Domain ID
    # @param domain_deployment_map_id Domain Deployment Map id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDeploymentMap, Fixnum, Hash)>] DomainDeploymentMap data, response status code and response headers
    def read_domain_deployment_map_for_infra_with_http_info(domain_id, domain_deployment_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_domain_deployment_map_for_infra ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.read_domain_deployment_map_for_infra"
      end
      # verify the required parameter 'domain_deployment_map_id' is set
      if @api_client.config.client_side_validation && domain_deployment_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_deployment_map_id' when calling PolicyApi.read_domain_deployment_map_for_infra"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/domain-deployment-maps/{domain-deployment-map-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'domain-deployment-map-id' + '}', domain_deployment_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DomainDeploymentMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_domain_deployment_map_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read domain
    # Read a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Domain]
    def read_domain_for_infra(domain_id, opts = {})
      data, _status_code, _headers = read_domain_for_infra_with_http_info(domain_id, opts)
      return data
    end

    # Read domain
    # Read a domain. 
    # @param domain_id Domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Fixnum, Hash)>] Domain data, response status code and response headers
    def read_domain_for_infra_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_domain_for_infra ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.read_domain_for_infra"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Domain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read an Enforcement Point
    # Read an Enforcement Point 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [EnforcementPoint]
    def read_enforcement_point_for_infra(deployment_zone_id, enforcementpoint_id, opts = {})
      data, _status_code, _headers = read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts)
      return data
    end

    # Read an Enforcement Point
    # Read an Enforcement Point 
    # @param deployment_zone_id Deployment zone id
    # @param enforcementpoint_id EnforcementPoint id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnforcementPoint, Fixnum, Hash)>] EnforcementPoint data, response status code and response headers
    def read_enforcement_point_for_infra_with_http_info(deployment_zone_id, enforcementpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_enforcement_point_for_infra ..."
      end
      # verify the required parameter 'deployment_zone_id' is set
      if @api_client.config.client_side_validation && deployment_zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_zone_id' when calling PolicyApi.read_enforcement_point_for_infra"
      end
      # verify the required parameter 'enforcementpoint_id' is set
      if @api_client.config.client_side_validation && enforcementpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'enforcementpoint_id' when calling PolicyApi.read_enforcement_point_for_infra"
      end
      # resource path
      local_var_path = "/infra/deployment-zones/{deployment-zone-id}/enforcement-points/{enforcementpoint-id}".sub('{' + 'deployment-zone-id' + '}', deployment_zone_id.to_s).sub('{' + 'enforcementpoint-id' + '}', enforcementpoint_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_enforcement_point_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Enforcement Point
    # Read a Enforcement Point and the complete tree underneath. Returns the populated enforcement point object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedEnforcementPoint]
    def read_enforcement_point_realized_state(enforcement_point_name, opts = {})
      data, _status_code, _headers = read_enforcement_point_realized_state_with_http_info(enforcement_point_name, opts)
      return data
    end

    # Read Enforcement Point
    # Read a Enforcement Point and the complete tree underneath. Returns the populated enforcement point object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedEnforcementPoint, Fixnum, Hash)>] RealizedEnforcementPoint data, response status code and response headers
    def read_enforcement_point_realized_state_with_http_info(enforcement_point_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_enforcement_point_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_enforcement_point_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedEnforcementPoint')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_enforcement_point_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Firewall
    # Read a Firewall and the complete tree underneath. Returns the populated Firewall object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param firewall_section_id Firewall Section Id
    # @param [Hash] opts the optional parameters
    # @return [RealizedFirewallSection]
    def read_firewall_section_realized_state(enforcement_point_name, firewall_section_id, opts = {})
      data, _status_code, _headers = read_firewall_section_realized_state_with_http_info(enforcement_point_name, firewall_section_id, opts)
      return data
    end

    # Read Firewall
    # Read a Firewall and the complete tree underneath. Returns the populated Firewall object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param firewall_section_id Firewall Section Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedFirewallSection, Fixnum, Hash)>] RealizedFirewallSection data, response status code and response headers
    def read_firewall_section_realized_state_with_http_info(enforcement_point_name, firewall_section_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_firewall_section_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_firewall_section_realized_state"
      end
      # verify the required parameter 'firewall_section_id' is set
      if @api_client.config.client_side_validation && firewall_section_id.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_section_id' when calling PolicyApi.read_firewall_section_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections/{firewall-section-id}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'firewall-section-id' + '}', firewall_section_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedFirewallSection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_firewall_section_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def read_group_for_domain(domain_id, group_id, opts = {})
      data, _status_code, _headers = read_group_for_domain_with_http_info(domain_id, group_id, opts)
      return data
    end

    # Read group
    # Read group
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Fixnum, Hash)>] Group data, response status code and response headers
    def read_group_for_domain_with_http_info(domain_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_group_for_domain ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.read_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.read_group_for_domain"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/groups/{group-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Group')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def read_infra(opts = {})
      data, _status_code, _headers = read_infra_with_http_info(opts)
      return data
    end

    # Read infra
    # Read infra. Returns only the infra related properties. Inner object are not populated. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def read_infra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_infra ..."
      end
      # resource path
      local_var_path = "/infra"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read IPSet Realized state
    # Read an IPSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param ip_set_name IPSet name
    # @param [Hash] opts the optional parameters
    # @return [RealizedIPSet]
    def read_ip_set_realized_state(enforcement_point_name, ip_set_name, opts = {})
      data, _status_code, _headers = read_ip_set_realized_state_with_http_info(enforcement_point_name, ip_set_name, opts)
      return data
    end

    # Read IPSet Realized state
    # Read an IPSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param ip_set_name IPSet name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedIPSet, Fixnum, Hash)>] RealizedIPSet data, response status code and response headers
    def read_ip_set_realized_state_with_http_info(enforcement_point_name, ip_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_ip_set_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_ip_set_realized_state"
      end
      # verify the required parameter 'ip_set_name' is set
      if @api_client.config.client_side_validation && ip_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'ip_set_name' when calling PolicyApi.read_ip_set_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt/{ip-set-name}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'ip-set-name' + '}', ip_set_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedIPSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_ip_set_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read MACSet Realized state
    # Read an MACSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param mac_set_name MACSet name
    # @param [Hash] opts the optional parameters
    # @return [RealizedMACSet]
    def read_mac_set_realized_state(enforcement_point_name, mac_set_name, opts = {})
      data, _status_code, _headers = read_mac_set_realized_state_with_http_info(enforcement_point_name, mac_set_name, opts)
      return data
    end

    # Read MACSet Realized state
    # Read an MACSet 
    # @param enforcement_point_name Enforcement Point Name
    # @param mac_set_name MACSet name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedMACSet, Fixnum, Hash)>] RealizedMACSet data, response status code and response headers
    def read_mac_set_realized_state_with_http_info(enforcement_point_name, mac_set_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_mac_set_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_mac_set_realized_state"
      end
      # verify the required parameter 'mac_set_name' is set
      if @api_client.config.client_side_validation && mac_set_name.nil?
        fail ArgumentError, "Missing the required parameter 'mac_set_name' when calling PolicyApi.read_mac_set_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt/{mac-set-name}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'mac-set-name' + '}', mac_set_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedMACSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_mac_set_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Group
    # Read a NSGroup and the complete tree underneath. Returns the populated NSgroup object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsgroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedNSGroup]
    def read_ns_group_realized_state(enforcement_point_name, nsgroup_name, opts = {})
      data, _status_code, _headers = read_ns_group_realized_state_with_http_info(enforcement_point_name, nsgroup_name, opts)
      return data
    end

    # Read Group
    # Read a NSGroup and the complete tree underneath. Returns the populated NSgroup object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsgroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedNSGroup, Fixnum, Hash)>] RealizedNSGroup data, response status code and response headers
    def read_ns_group_realized_state_with_http_info(enforcement_point_name, nsgroup_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_ns_group_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_ns_group_realized_state"
      end
      # verify the required parameter 'nsgroup_name' is set
      if @api_client.config.client_side_validation && nsgroup_name.nil?
        fail ArgumentError, "Missing the required parameter 'nsgroup_name' when calling PolicyApi.read_ns_group_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups/{nsgroup-name}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'nsgroup-name' + '}', nsgroup_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedNSGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_ns_group_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read NSService
    # Read a NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsservice_name NSService Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedNSService]
    def read_ns_service_realized_state(enforcement_point_name, nsservice_name, opts = {})
      data, _status_code, _headers = read_ns_service_realized_state_with_http_info(enforcement_point_name, nsservice_name, opts)
      return data
    end

    # Read NSService
    # Read a NSService. 
    # @param enforcement_point_name Enforcement Point Name
    # @param nsservice_name NSService Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedNSService, Fixnum, Hash)>] RealizedNSService data, response status code and response headers
    def read_ns_service_realized_state_with_http_info(enforcement_point_name, nsservice_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_ns_service_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_ns_service_realized_state"
      end
      # verify the required parameter 'nsservice_name' is set
      if @api_client.config.client_side_validation && nsservice_name.nil?
        fail ArgumentError, "Missing the required parameter 'nsservice_name' when calling PolicyApi.read_ns_service_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices/{nsservice-name}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'nsservice-name' + '}', nsservice_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedNSService')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_ns_service_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read Group
    # Read a Security Group and the complete tree underneath. Returns the populated Security Group object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param securitygroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [RealizedSecurityGroup]
    def read_security_group_realized_state(enforcement_point_name, securitygroup_name, opts = {})
      data, _status_code, _headers = read_security_group_realized_state_with_http_info(enforcement_point_name, securitygroup_name, opts)
      return data
    end

    # Read Group
    # Read a Security Group and the complete tree underneath. Returns the populated Security Group object. 
    # @param enforcement_point_name Enforcement Point Name
    # @param securitygroup_name Group Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealizedSecurityGroup, Fixnum, Hash)>] RealizedSecurityGroup data, response status code and response headers
    def read_security_group_realized_state_with_http_info(enforcement_point_name, securitygroup_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_security_group_realized_state ..."
      end
      # verify the required parameter 'enforcement_point_name' is set
      if @api_client.config.client_side_validation && enforcement_point_name.nil?
        fail ArgumentError, "Missing the required parameter 'enforcement_point_name' when calling PolicyApi.read_security_group_realized_state"
      end
      # verify the required parameter 'securitygroup_name' is set
      if @api_client.config.client_side_validation && securitygroup_name.nil?
        fail ArgumentError, "Missing the required parameter 'securitygroup_name' when calling PolicyApi.read_security_group_realized_state"
      end
      # resource path
      local_var_path = "/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups/{securitygroup-name}".sub('{' + 'enforcement-point-name' + '}', enforcement_point_name.to_s).sub('{' + 'securitygroup-name' + '}', securitygroup_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RealizedSecurityGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_security_group_realized_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceEntry]
    def read_service_entry(service_id, service_entry_id, opts = {})
      data, _status_code, _headers = read_service_entry_with_http_info(service_id, service_entry_id, opts)
      return data
    end

    # Service entry
    # Service entry
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceEntry, Fixnum, Hash)>] ServiceEntry data, response status code and response headers
    def read_service_entry_with_http_info(service_id, service_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_service_entry ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.read_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyApi.read_service_entry"
      end
      # resource path
      local_var_path = "/infra/services/{service-id}/service-entries/{service-entry-id}".sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def read_service_for_tenant(service_id, opts = {})
      data, _status_code, _headers = read_service_for_tenant_with_http_info(service_id, opts)
      return data
    end

    # Read a service
    # Read a service
    # @param service_id Service ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def read_service_for_tenant_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_service_for_tenant ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.read_service_for_tenant"
      end
      # resource path
      local_var_path = "/infra/services/{service-id}".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read template.
    # Read a template and returns the template properties for a given template identifier. 
    # @param template_id Template identifier
    # @param [Hash] opts the optional parameters
    # @return [PolicyTemplate]
    def read_template(template_id, opts = {})
      data, _status_code, _headers = read_template_with_http_info(template_id, opts)
      return data
    end

    # Read template.
    # Read a template and returns the template properties for a given template identifier. 
    # @param template_id Template identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyTemplate, Fixnum, Hash)>] PolicyTemplate data, response status code and response headers
    def read_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.read_template ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling PolicyApi.read_template"
      end
      # resource path
      local_var_path = "/templates/{template-id}".sub('{' + 'template-id' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#read_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revise the positioninng of communication maps
    # This is used to set a precedence of a communication map w.r.t others. 
    # @param domain_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map path if operation is &#39;insert_after&#39; or insert_before 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [nil]
    def revise_communication_maps_revise(domain_id, communication_map, opts = {})
      revise_communication_maps_revise_with_http_info(domain_id, communication_map, opts)
      return nil
    end

    # Revise the positioninng of communication maps
    # This is used to set a precedence of a communication map w.r.t others. 
    # @param domain_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map path if operation is &#39;insert_after&#39; or insert_before 
    # @option opts [String] :operation Operation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def revise_communication_maps_revise_with_http_info(domain_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.revise_communication_maps_revise ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.revise_communication_maps_revise"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling PolicyApi.revise_communication_maps_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map?action=revise".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#revise_communication_maps_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API. 
    # @param domain_id Domain ID
    # @param communication_entry_id CommunicationEntry ID
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_communication_entry(domain_id, communication_entry_id, communication_entry, opts = {})
      update_communication_entry_with_http_info(domain_id, communication_entry_id, communication_entry, opts)
      return nil
    end

    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API. 
    # @param domain_id Domain ID
    # @param communication_entry_id CommunicationEntry ID
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_communication_entry_with_http_info(domain_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_communication_entry ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling PolicyApi.update_communication_entry"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map/communication-entries/{communication-entry-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update communication map
    # Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced. 
    # @param domain_id Domain ID
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_communication_map_for_domain(domain_id, communication_map, opts = {})
      update_communication_map_for_domain_with_http_info(domain_id, communication_map, opts)
      return nil
    end

    # Update communication map
    # Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced. 
    # @param domain_id Domain ID
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_communication_map_for_domain_with_http_info(domain_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_communication_map_for_domain ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling PolicyApi.update_communication_map_for_domain"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/communication-map".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a CommunicationProfile
    # Create a new CommunicationProfile if a CommunicationProfile with the given ID does not already exist. Creates new CommunicationProfileEntries if populated in the CommunicationProfile. If a CommunicationProfile with the given ID already exists, update the CommunicationProfile including the nested CommunicationProfileEntries. This is a full replace. This is the ONLY way to create CommunicationProfileEntries and to add them to a CommunicationProfile. 
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_communication_profile(communication_profile_id, communication_profile, opts = {})
      update_communication_profile_with_http_info(communication_profile_id, communication_profile, opts)
      return nil
    end

    # Create or update a CommunicationProfile
    # Create a new CommunicationProfile if a CommunicationProfile with the given ID does not already exist. Creates new CommunicationProfileEntries if populated in the CommunicationProfile. If a CommunicationProfile with the given ID already exists, update the CommunicationProfile including the nested CommunicationProfileEntries. This is a full replace. This is the ONLY way to create CommunicationProfileEntries and to add them to a CommunicationProfile. 
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_communication_profile_with_http_info(communication_profile_id, communication_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_communication_profile ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.update_communication_profile"
      end
      # verify the required parameter 'communication_profile' is set
      if @api_client.config.client_side_validation && communication_profile.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile' when calling PolicyApi.update_communication_profile"
      end
      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_communication_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a CommunicationProfileEntry
    # Update the CommunicationProfileEntry. If a CommunicationProfileEntry with the communication-profile-entry-id is not already present, this API fails with a 404. Creation of CommunicationProfileEntries is not allowed using this API. 
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile_entry_id CommunicationProfileEntry ID
    # @param communication_profile_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_communication_profile_entry(communication_profile_id, communication_profile_entry_id, communication_profile_entry, opts = {})
      update_communication_profile_entry_with_http_info(communication_profile_id, communication_profile_entry_id, communication_profile_entry, opts)
      return nil
    end

    # Create or update a CommunicationProfileEntry
    # Update the CommunicationProfileEntry. If a CommunicationProfileEntry with the communication-profile-entry-id is not already present, this API fails with a 404. Creation of CommunicationProfileEntries is not allowed using this API. 
    # @param communication_profile_id CommunicationProfile ID
    # @param communication_profile_entry_id CommunicationProfileEntry ID
    # @param communication_profile_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_communication_profile_entry_with_http_info(communication_profile_id, communication_profile_entry_id, communication_profile_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_communication_profile_entry ..."
      end
      # verify the required parameter 'communication_profile_id' is set
      if @api_client.config.client_side_validation && communication_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_id' when calling PolicyApi.update_communication_profile_entry"
      end
      # verify the required parameter 'communication_profile_entry_id' is set
      if @api_client.config.client_side_validation && communication_profile_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_entry_id' when calling PolicyApi.update_communication_profile_entry"
      end
      # verify the required parameter 'communication_profile_entry' is set
      if @api_client.config.client_side_validation && communication_profile_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_profile_entry' when calling PolicyApi.update_communication_profile_entry"
      end
      # resource path
      local_var_path = "/infra/communication-profiles/{communication-profile-id}/communication-profile-entries/{communication-profile-entry-id}".sub('{' + 'communication-profile-id' + '}', communication_profile_id.to_s).sub('{' + 'communication-profile-entry-id' + '}', communication_profile_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_profile_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_communication_profile_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a domain
    # If a domain with the domain-id is not already present, create a new domain. If it already exists, update the domain including the nested groups. This is a full replace 
    # @param domain_id Domain ID
    # @param domain 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_domain_for_infra(domain_id, domain, opts = {})
      update_domain_for_infra_with_http_info(domain_id, domain, opts)
      return nil
    end

    # Create or update a domain
    # If a domain with the domain-id is not already present, create a new domain. If it already exists, update the domain including the nested groups. This is a full replace 
    # @param domain_id Domain ID
    # @param domain 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_domain_for_infra_with_http_info(domain_id, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_domain_for_infra ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.update_domain_for_infra"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling PolicyApi.update_domain_for_infra"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}".sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_domain_for_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_group_for_domain(domain_id, group_id, group, opts = {})
      update_group_for_domain_with_http_info(domain_id, group_id, group, opts)
      return nil
    end

    # Create or update a group
    # If a group with the group-id is not already present, create a new group. If it already exists, update the group. 
    # @param domain_id Domain ID
    # @param group_id Group ID
    # @param group 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_group_for_domain_with_http_info(domain_id, group_id, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_group_for_domain ..."
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyApi.update_group_for_domain"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.update_group_for_domain"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling PolicyApi.update_group_for_domain"
      end
      # resource path
      local_var_path = "/infra/domains/{domain-id}/groups/{group-id}".sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'group-id' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_group_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the infra including all the nested entities
    # Update the infra including all the nested entities
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_infra(infra, opts = {})
      update_infra_with_http_info(infra, opts)
      return nil
    end

    # Update the infra including all the nested entities
    # Update the infra including all the nested entities
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_infra_with_http_info(infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_infra ..."
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling PolicyApi.update_infra"
      end
      # resource path
      local_var_path = "/infra"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_infra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_service_entry(service_id, service_entry_id, service_entry, opts = {})
      update_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts)
      return nil
    end

    # Create or update a ServiceEntry
    # If a service entry with the service-entry-id is not already present, create a new service entry. If it already exists, update the service entry. 
    # @param service_id Service ID
    # @param service_entry_id Service entry ID
    # @param service_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_service_entry_with_http_info(service_id, service_entry_id, service_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_service_entry ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.update_service_entry"
      end
      # verify the required parameter 'service_entry_id' is set
      if @api_client.config.client_side_validation && service_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry_id' when calling PolicyApi.update_service_entry"
      end
      # verify the required parameter 'service_entry' is set
      if @api_client.config.client_side_validation && service_entry.nil?
        fail ArgumentError, "Missing the required parameter 'service_entry' when calling PolicyApi.update_service_entry"
      end
      # resource path
      local_var_path = "/infra/services/{service-id}/service-entries/{service-entry-id}".sub('{' + 'service-id' + '}', service_id.to_s).sub('{' + 'service-entry-id' + '}', service_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_service_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_service_for_tenant(service_id, service, opts = {})
      update_service_for_tenant_with_http_info(service_id, service, opts)
      return nil
    end

    # Create or update a Service
    # Create a new service if a service with the given ID does not already exist. Creates new service entries if populated in the service. If a service with the given ID already exists, update the service including the nested service entries. This is a full replace. 
    # @param service_id Service ID
    # @param service 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_service_for_tenant_with_http_info(service_id, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PolicyApi.update_service_for_tenant ..."
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling PolicyApi.update_service_for_tenant"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling PolicyApi.update_service_for_tenant"
      end
      # resource path
      local_var_path = "/infra/services/{service-id}".sub('{' + 'service-id' + '}', service_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(service)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_service_for_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
